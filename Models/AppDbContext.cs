// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace HotelFuen31.APIs.Models;

public partial class AppDbContext : DbContext
{
    public AppDbContext()
    {
    }

    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }

    public virtual DbSet<Authorization> Authorizations { get; set; }

    public virtual DbSet<BusRoute> BusRoutes { get; set; }

    public virtual DbSet<BusTracker> BusTrackers { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<CarMaintenance> CarMaintenances { get; set; }

    public virtual DbSet<CarManagement> CarManagements { get; set; }

    public virtual DbSet<CarPrice> CarPrices { get; set; }

    public virtual DbSet<CarRentCartItem> CarRentCartItems { get; set; }

    public virtual DbSet<CarRentOrder> CarRentOrders { get; set; }

    public virtual DbSet<CarRentOrderItem> CarRentOrderItems { get; set; }

    public virtual DbSet<CarResponsible> CarResponsibles { get; set; }

    public virtual DbSet<CarTaxiCartItem> CarTaxiCartItems { get; set; }

    public virtual DbSet<CarTaxiOrder> CarTaxiOrders { get; set; }

    public virtual DbSet<CarTaxiOrderItem> CarTaxiOrderItems { get; set; }

    public virtual DbSet<CartRoomItem> CartRoomItems { get; set; }

    public virtual DbSet<Cipher> Ciphers { get; set; }

    public virtual DbSet<Counter> Counters { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<CouponMember> CouponMembers { get; set; }

    public virtual DbSet<CouponRoomCountSameDate> CouponRoomCountSameDates { get; set; }

    public virtual DbSet<CouponRoomTimeSpan> CouponRoomTimeSpans { get; set; }

    public virtual DbSet<CouponThresholdDiscount> CouponThresholdDiscounts { get; set; }

    public virtual DbSet<CouponType> CouponTypes { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeRole> EmployeeRoles { get; set; }

    public virtual DbSet<HallDishCategory> HallDishCategories { get; set; }

    public virtual DbSet<HallItem> HallItems { get; set; }

    public virtual DbSet<HallLog> HallLogs { get; set; }

    public virtual DbSet<HallMenu> HallMenus { get; set; }

    public virtual DbSet<HallMenuSchedule> HallMenuSchedules { get; set; }

    public virtual DbSet<HallOrderItem> HallOrderItems { get; set; }

    public virtual DbSet<HallOrderVw> HallOrderVws { get; set; }

    public virtual DbSet<Hash> Hashes { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobParameter> JobParameters { get; set; }

    public virtual DbSet<JobQueue> JobQueues { get; set; }

    public virtual DbSet<List> Lists { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberLevel> MemberLevels { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationType> NotificationTypes { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Reservation> Reservations { get; set; }

    public virtual DbSet<ReservationAppointmentTimePeriod> ReservationAppointmentTimePeriods { get; set; }

    public virtual DbSet<ReservationItem> ReservationItems { get; set; }

    public virtual DbSet<ReservationRoom> ReservationRooms { get; set; }

    public virtual DbSet<ReservationRoomStatus> ReservationRoomStatuses { get; set; }

    public virtual DbSet<ReservationRoomType> ReservationRoomTypes { get; set; }

    public virtual DbSet<ReservationServiceDetail> ReservationServiceDetails { get; set; }

    public virtual DbSet<ReservationServicesType> ReservationServicesTypes { get; set; }

    public virtual DbSet<ReservationStatus> ReservationStatuses { get; set; }

    public virtual DbSet<ReservationTotalPriceView> ReservationTotalPriceViews { get; set; }

    public virtual DbSet<RestaurantCustomer> RestaurantCustomers { get; set; }

    public virtual DbSet<RestaurantPeriod> RestaurantPeriods { get; set; }

    public virtual DbSet<RestaurantReservation> RestaurantReservations { get; set; }

    public virtual DbSet<RestaurantSeat> RestaurantSeats { get; set; }

    public virtual DbSet<RestaurantStatus> RestaurantStatuses { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RoleAuthorization> RoleAuthorizations { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<RoomBooking> RoomBookings { get; set; }

    public virtual DbSet<RoomCalendar> RoomCalendars { get; set; }

    public virtual DbSet<RoomDaysPrice> RoomDaysPrices { get; set; }

    public virtual DbSet<RoomDetailImg> RoomDetailImgs { get; set; }

    public virtual DbSet<RoomStatusSetting> RoomStatusSettings { get; set; }

    public virtual DbSet<RoomType> RoomTypes { get; set; }

    public virtual DbSet<ScdsOq> ScdsOqs { get; set; }

    public virtual DbSet<ScdsPe> ScdsPes { get; set; }

    public virtual DbSet<ScdsPr> ScdsPrs { get; set; }

    public virtual DbSet<ScdsTq> ScdsTqs { get; set; }

    public virtual DbSet<Schema> Schemas { get; set; }

    public virtual DbSet<SendedNotification> SendedNotifications { get; set; }

    public virtual DbSet<Server> Servers { get; set; }

    public virtual DbSet<Set> Sets { get; set; }

    public virtual DbSet<ShoppingCartDiscount> ShoppingCartDiscounts { get; set; }

    public virtual DbSet<ShoppingCartDiscountsPriceEqual> ShoppingCartDiscountsPriceEquals { get; set; }

    public virtual DbSet<ShoppingCartDiscountsPriceReduce> ShoppingCartDiscountsPriceReduces { get; set; }

    public virtual DbSet<ShoppingCartDiscountsTheQuantity> ShoppingCartDiscountsTheQuantities { get; set; }

    public virtual DbSet<ShoppingCartDiscountsTotalQuantity> ShoppingCartDiscountsTotalQuantities { get; set; }

    public virtual DbSet<ShoppingCartOrder> ShoppingCartOrders { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AggregatedCounter>(entity =>
        {
            entity.HasKey(e => e.Key).HasName("PK_HangFire_CounterAggregated");

            entity.ToTable("AggregatedCounter", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_AggregatedCounter_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Authorization>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<BusRoute>(entity =>
        {
            entity.HasIndex(e => new { e.StarterStop, e.DestinationStop }, "UC_StarterDestination").IsUnique();

            entity.Property(e => e.DestinationLatitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DestinationLongtitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DestinationStop)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StarterLatitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StarterLongtitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StarterStop)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<BusTracker>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.Property(e => e.Comment)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Picture)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<CarMaintenance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Maintenance");

            entity.ToTable("CarMaintenance");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Expense).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Car).WithMany(p => p.CarMaintenances)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarMaintenance_CarManagements");

            entity.HasOne(d => d.Emp).WithMany(p => p.CarMaintenances)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarMaintenance_Employee");
        });

        modelBuilder.Entity<CarManagement>(entity =>
        {
            entity.Property(e => e.Brand)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CarIdentity)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CarModel)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Goal)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ImgUrl)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarPrice>(entity =>
        {
            entity.HasIndex(e => new { e.LowDistance, e.HighDistance }, "UC_Distance").IsUnique();

            entity.Property(e => e.HighDistance)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LowDistance)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarRentCartItem>(entity =>
        {
            entity.HasIndex(e => new { e.CarId, e.StartTime, e.EndTime, e.MemberId }, "UC_Member_StartEnd_CarId").IsUnique();

            entity.Property(e => e.SubTotal).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Car).WithMany(p => p.CarRentCartItems)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarRentCartItems_CarManagements");

            entity.HasOne(d => d.Emp).WithMany(p => p.CarRentCartItems)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarRentCartItems_Employee");

            entity.HasOne(d => d.Member).WithMany(p => p.CarRentCartItems)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarRentCartItems_Members");
        });

        modelBuilder.Entity<CarRentOrder>(entity =>
        {
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarRentOrderItem>(entity =>
        {
            entity.Property(e => e.SubTotal).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Car).WithMany(p => p.CarRentOrderItems)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarRentOrderItems_CarManagements");

            entity.HasOne(d => d.Emp).WithMany(p => p.CarRentOrderItems)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarRentOrderItems_Employee");

            entity.HasOne(d => d.Member).WithMany(p => p.CarRentOrderItems)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarRentOrderItems_Members");
        });

        modelBuilder.Entity<CarResponsible>(entity =>
        {
            entity.ToTable("CarResponsible");

            entity.HasIndex(e => new { e.CarId, e.EmpId }, "UC_EmpCar").IsUnique();

            entity.HasOne(d => d.Car).WithMany(p => p.CarResponsibles)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarResponsible_CarId");

            entity.HasOne(d => d.Emp).WithMany(p => p.CarResponsibles)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarResponsible_EmpId");
        });

        modelBuilder.Entity<CarTaxiCartItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CarCartItems");

            entity.Property(e => e.DestinationLatitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DestinationLongtitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PickUpLatitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PickUpLongtitude)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Car).WithMany(p => p.CarTaxiCartItems)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarTaxiCartItems_CarManagements");

            entity.HasOne(d => d.Emp).WithMany(p => p.CarTaxiCartItems)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarTaxiCartItems_Employee");

            entity.HasOne(d => d.Member).WithMany(p => p.CarTaxiCartItems)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarTaxiCartItems_Members");
        });

        modelBuilder.Entity<CarTaxiOrder>(entity =>
        {
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<CarTaxiOrderItem>(entity =>
        {
            entity.Property(e => e.DestinationLatitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DestinationLocation)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.DestinationLongtitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PickUpLatitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PickUpLocation)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.PickUpLongtitude)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Car).WithMany(p => p.CarTaxiOrderItems)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarTaxiOrderItems_Cars");

            entity.HasOne(d => d.Emp).WithMany(p => p.CarTaxiOrderItems)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarTaxiOrderItems_Employee");

            entity.HasOne(d => d.Member).WithMany(p => p.CarTaxiOrderItems)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarTaxiOrderItems_Members");
        });

        modelBuilder.Entity<CartRoomItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RoomCarts");

            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Uid).IsRequired();

            entity.HasOne(d => d.Type).WithMany(p => p.CartRoomItems)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartRoomItems_RoomTypeId");
        });

        modelBuilder.Entity<Cipher>(entity =>
        {
            entity.ToTable("cipher");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.Property(e => e.Comment).HasMaxLength(50);

            entity.HasOne(d => d.Type).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coupons_TypeId");
        });

        modelBuilder.Entity<CouponMember>(entity =>
        {
            entity.ToTable("CouponMember");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponMembers)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponMember_CouponId");

            entity.HasOne(d => d.Member).WithMany(p => p.CouponMembers)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponMember_MemberId");
        });

        modelBuilder.Entity<CouponRoomCountSameDate>(entity =>
        {
            entity.ToTable("CouponRoomCountSameDate");

            entity.HasIndex(e => e.CouponId, "IX_CouponRoomCountSameDate").IsUnique();

            entity.Property(e => e.PercentOff).HasColumnName("percentOff");

            entity.HasOne(d => d.Coupon).WithOne(p => p.CouponRoomCountSameDate)
                .HasForeignKey<CouponRoomCountSameDate>(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponRoomCountSameDate_CouponId");

            entity.HasOne(d => d.RoomType).WithMany(p => p.CouponRoomCountSameDates)
                .HasForeignKey(d => d.RoomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponRoomCountSameDate_RoomTypeId");
        });

        modelBuilder.Entity<CouponRoomTimeSpan>(entity =>
        {
            entity.ToTable("CouponRoomTimeSpan");

            entity.HasIndex(e => e.CouponId, "IX_CouponRoomTimeSpan").IsUnique();

            entity.HasOne(d => d.Coupon).WithOne(p => p.CouponRoomTimeSpan)
                .HasForeignKey<CouponRoomTimeSpan>(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponRoomTimeSpan_CouponId");

            entity.HasOne(d => d.RoomType).WithMany(p => p.CouponRoomTimeSpans)
                .HasForeignKey(d => d.RoomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponRoomTimeSpan_RoomTypeId");
        });

        modelBuilder.Entity<CouponThresholdDiscount>(entity =>
        {
            entity.ToTable("CouponThresholdDiscount");

            entity.HasIndex(e => e.CouponId, "IX_CouponThresholdDiscount").IsUnique();

            entity.HasOne(d => d.Coupon).WithOne(p => p.CouponThresholdDiscount)
                .HasForeignKey<CouponThresholdDiscount>(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponThresholdDiscount_CouponId");
        });

        modelBuilder.Entity<CouponType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.ToTable("Employee");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(1024);
            entity.Property(e => e.BloodType)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.IdentityNumber)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(32);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Salt)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeRole>(entity =>
        {
            entity.HasIndex(e => new { e.EmployeeId, e.RoleId }, "IX_EmployeeRoles_UK").IsUnique();

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeRoles)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeRoles_EmployeeId");

            entity.HasOne(d => d.Role).WithMany(p => p.EmployeeRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeRoles_RoleId");
        });

        modelBuilder.Entity<HallDishCategory>(entity =>
        {
            entity.ToTable("HallDishCategory");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<HallItem>(entity =>
        {
            entity.Property(e => e.Capacity)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Ddescription)
                .HasMaxLength(256)
                .HasColumnName("DDescription");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.HallName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<HallLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_HallLogs_1");

            entity.Property(e => e.CellPhone)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Hall).WithMany(p => p.HallLogs)
                .HasForeignKey(d => d.HallId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HallLogs_HallItems");
        });

        modelBuilder.Entity<HallMenu>(entity =>
        {
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.DishName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Category).WithMany(p => p.HallMenus)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HallMenus_HallDishCategory");
        });

        modelBuilder.Entity<HallMenuSchedule>(entity =>
        {
            entity.HasOne(d => d.HallMenu).WithMany(p => p.HallMenuSchedules)
                .HasForeignKey(d => d.HallMenuId)
                .HasConstraintName("FK_HallMenuSchedules_HallMenus");

            entity.HasOne(d => d.HallOrderItem).WithMany(p => p.HallMenuSchedules)
                .HasForeignKey(d => d.HallOrderItemId)
                .HasConstraintName("FK_HallMenuSchedules_HallOrderItem");
        });

        modelBuilder.Entity<HallOrderItem>(entity =>
        {
            entity.ToTable("HallOrderItem");

            entity.Property(e => e.SubTotal).HasComputedColumnSql("([Price]*[Qty])", false);

            entity.HasOne(d => d.HallLog).WithMany(p => p.HallOrderItems)
                .HasForeignKey(d => d.HallLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HallOrderItem_HallLogs");
        });

        modelBuilder.Entity<HallOrderVw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HallOrderVw");

            entity.Property(e => e.CellPhone)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Hash>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Field }).HasName("PK_HangFire_Hash");

            entity.ToTable("Hash", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Hash_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Field).HasMaxLength(100);
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_HangFire_Job");

            entity.ToTable("Job", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Job_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.HasIndex(e => e.StateName, "IX_HangFire_Job_StateName").HasFilter("([StateName] IS NOT NULL)");

            entity.Property(e => e.Arguments).IsRequired();
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            entity.Property(e => e.InvocationData).IsRequired();
            entity.Property(e => e.StateName).HasMaxLength(20);
        });

        modelBuilder.Entity<JobParameter>(entity =>
        {
            entity.HasKey(e => new { e.JobId, e.Name }).HasName("PK_HangFire_JobParameter");

            entity.ToTable("JobParameter", "HangFire");

            entity.Property(e => e.Name).HasMaxLength(40);

            entity.HasOne(d => d.Job).WithMany(p => p.JobParameters)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_HangFire_JobParameter_Job");
        });

        modelBuilder.Entity<JobQueue>(entity =>
        {
            entity.HasKey(e => new { e.Queue, e.Id }).HasName("PK_HangFire_JobQueue");

            entity.ToTable("JobQueue", "HangFire");

            entity.Property(e => e.Queue).HasMaxLength(50);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.FetchedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<List>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Id }).HasName("PK_HangFire_List");

            entity.ToTable("List", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_List_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasIndex(e => e.IdentityNumber, "IX_Members").IsUnique();

            entity.Property(e => e.Address).HasMaxLength(1024);
            entity.Property(e => e.ConfirmCode)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.IdentityNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(32);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Salt).HasMaxLength(50);

            entity.HasOne(d => d.Level).WithMany(p => p.Members)
                .HasForeignKey(d => d.LevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Members_LevelId");
        });

        modelBuilder.Entity<MemberLevel>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Notification");

            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Level).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_Notifications_MemberLevels");

            entity.HasOne(d => d.Type).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notifications_NotificationTypes1");
        });

        modelBuilder.Entity<NotificationType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.MerchantTradeNo).HasMaxLength(50);
            entity.Property(e => e.PaymentType).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeChargeFee).HasMaxLength(50);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.RtnMsg).HasMaxLength(50);
            entity.Property(e => e.TradeDate).HasMaxLength(50);
            entity.Property(e => e.TradeNo).HasMaxLength(50);
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Reservation_PK");

            entity.ToTable("Reservation");

            entity.Property(e => e.ClientId).HasColumnName("Client_id");
            entity.Property(e => e.ClientName)
                .HasMaxLength(16)
                .HasColumnName("Client_Name");
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.ReservationStatusId).HasColumnName("Reservation_Status_id");

            entity.HasOne(d => d.ReservationStatus).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.ReservationStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Reservation_Status");
        });

        modelBuilder.Entity<ReservationAppointmentTimePeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Appointment_time_period_PK");

            entity.ToTable("Reservation_Appointment_Time_Period");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.TimePeriod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Time_Period");
        });

        modelBuilder.Entity<ReservationItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Reservation_Item_PK");

            entity.ToTable("Reservation_Item");

            entity.Property(e => e.AppointmentDate)
                .HasColumnType("date")
                .HasColumnName("Appointment_date");
            entity.Property(e => e.AppointmentTimePeriodId).HasColumnName("Appointment_time_period_id");
            entity.Property(e => e.ReservationId).HasColumnName("Reservation_id");
            entity.Property(e => e.RoomId).HasColumnName("Room_id");
            entity.Property(e => e.RoomStatusId).HasColumnName("Room_status_id");
            entity.Property(e => e.ServiceDetailId).HasColumnName("Service_detail_id");
            entity.Property(e => e.TotalDuration).HasColumnName("Total_Duration");

            entity.HasOne(d => d.AppointmentTimePeriod).WithMany(p => p.ReservationItems)
                .HasForeignKey(d => d.AppointmentTimePeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Item_Reservation_Appointment_Time_Period");

            entity.HasOne(d => d.Reservation).WithMany(p => p.ReservationItems)
                .HasForeignKey(d => d.ReservationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Item_Reservation");

            entity.HasOne(d => d.Room).WithMany(p => p.ReservationItems)
                .HasForeignKey(d => d.RoomId)
                .HasConstraintName("FK_Reservation_Item_Reservation_Room");

            entity.HasOne(d => d.RoomStatus).WithMany(p => p.ReservationItems)
                .HasForeignKey(d => d.RoomStatusId)
                .HasConstraintName("FK_Reservation_Item_Reservation_Room_Status");

            entity.HasOne(d => d.ServiceDetail).WithMany(p => p.ReservationItems)
                .HasForeignKey(d => d.ServiceDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Item_Reservation_Service_detail");
        });

        modelBuilder.Entity<ReservationRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Room_PK");

            entity.ToTable("Reservation_Room");

            entity.Property(e => e.RoomName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("Room_Name");
            entity.Property(e => e.RoomTypeId).HasColumnName("Room_Type_id");

            entity.HasOne(d => d.RoomType).WithMany(p => p.ReservationRooms)
                .HasForeignKey(d => d.RoomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Room_Reservation_Room_Type");
        });

        modelBuilder.Entity<ReservationRoomStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Room_Status_PK");

            entity.ToTable("Reservation_Room_Status");

            entity.Property(e => e.RoomStatusName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("Room_Status_Name");
        });

        modelBuilder.Entity<ReservationRoomType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Room_Type_PK");

            entity.ToTable("Reservation_Room_Type");

            entity.Property(e => e.RoomTypeName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("Room_Type_Name");
        });

        modelBuilder.Entity<ReservationServiceDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Service_detail_PK");

            entity.ToTable("Reservation_Service_detail");

            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ImgURL");
            entity.Property(e => e.ServiceDetailName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Service_detail_Name");
            entity.Property(e => e.ServicesTypeId).HasColumnName("Services_Type_id");

            entity.HasOne(d => d.ServicesType).WithMany(p => p.ReservationServiceDetails)
                .HasForeignKey(d => d.ServicesTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Service_detail_Reservation_Services_Type");
        });

        modelBuilder.Entity<ReservationServicesType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Services_Type_PK");

            entity.ToTable("Reservation_Services_Type");

            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.ServicesTypeImageUrl)
                .HasMaxLength(200)
                .HasColumnName("Services_Type_ImageURL");
            entity.Property(e => e.ServicesTypeName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Services_Type_Name");
        });

        modelBuilder.Entity<ReservationStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Reservation_Status_PK");

            entity.ToTable("Reservation_Status");

            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("Status_Name");
        });

        modelBuilder.Entity<ReservationTotalPriceView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Reservation_TotalPriceView");

            entity.Property(e => e.ClientId).HasColumnName("Client_id");
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.ReservationStatusId).HasColumnName("Reservation_Status_id");
        });

        modelBuilder.Entity<RestaurantCustomer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Customers");

            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RestaurantPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Periods");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RestaurantReservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Reservations");

            entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");
            entity.Property(e => e.Date).HasColumnType("date");
            entity.Property(e => e.PeriodId).HasColumnName("Period_id");
            entity.Property(e => e.SeatId).HasColumnName("Seat_Id");
            entity.Property(e => e.StatusId).HasColumnName("Status_Id");

            entity.HasOne(d => d.Customer).WithMany(p => p.RestaurantReservations)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_Customers");

            entity.HasOne(d => d.Period).WithMany(p => p.RestaurantReservations)
                .HasForeignKey(d => d.PeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_Periods");

            entity.HasOne(d => d.Seat).WithMany(p => p.RestaurantReservations)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_Seats");

            entity.HasOne(d => d.Status).WithMany(p => p.RestaurantReservations)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_RestaurantReservations_RestaurantStatuses");
        });

        modelBuilder.Entity<RestaurantSeat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Seats");

            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("type");
        });

        modelBuilder.Entity<RestaurantStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Status");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<RoleAuthorization>(entity =>
        {
            entity.HasIndex(e => new { e.AuthorizationId, e.RoleId }, "IX_RoleAuthorizations_UK").IsUnique();

            entity.HasOne(d => d.Authorization).WithMany(p => p.RoleAuthorizations)
                .HasForeignKey(d => d.AuthorizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoleAuthorizations_AuthorizationId");

            entity.HasOne(d => d.Role).WithMany(p => p.RoleAuthorizations)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoleAuthorizations_RoleId");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.HasKey(e => e.RoomId).HasName("PK__Rooms__328639398538E86F");

            entity.Property(e => e.RoomId).ValueGeneratedNever();

            entity.HasOne(d => d.RoomType).WithMany(p => p.Rooms)
                .HasForeignKey(d => d.RoomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rooms_RoomTypeId");
        });

        modelBuilder.Entity<RoomBooking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Bookings__73951AED2B45D90B");

            entity.Property(e => e.BookingCancelDate).HasColumnType("datetime");
            entity.Property(e => e.BookingDate).HasColumnType("datetime");
            entity.Property(e => e.CheckInDate).HasColumnType("datetime");
            entity.Property(e => e.CheckOutDate).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Remark).IsUnicode(false);

            entity.HasOne(d => d.Order).WithMany(p => p.RoomBookings)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoomBookings_OrderId");

            entity.HasOne(d => d.Room).WithMany(p => p.RoomBookings)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoomBookings_RoomId");
        });

        modelBuilder.Entity<RoomCalendar>(entity =>
        {
            entity.HasKey(e => e.Date).HasName("PK__Calendar__77387D0666F3178B");

            entity.ToTable("RoomCalendar");

            entity.Property(e => e.Date).HasColumnType("date");
            entity.Property(e => e.Description)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IsHoliday)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Week)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RoomDaysPrice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RoomDaysPrice");

            entity.Property(e => e.Date).HasColumnType("date");
            entity.Property(e => e.Description)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IsHoliday)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Week)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RoomDetailImg>(entity =>
        {
            entity.HasKey(e => new { e.RoomTypeId, e.ImgSeq });

            entity.ToTable("RoomDetailImg");

            entity.Property(e => e.ImgUrl)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RoomStatusSetting>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__StatusSe__C8EE20633ED3749B");

            entity.ToTable("RoomStatusSetting");

            entity.Property(e => e.StatusId).ValueGeneratedNever();
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RoomType>(entity =>
        {
            entity.HasKey(e => e.RoomTypeId).HasName("PK__RoomType__BCC8963138C8FFE4");

            entity.Property(e => e.BedType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ScdsOq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SCDs_OQ");

            entity.Property(e => e.ActivityName).IsRequired();
            entity.Property(e => e.Discount).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.FormName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ScdsPe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SCDs_PE");

            entity.Property(e => e.ActivityName).IsRequired();
            entity.Property(e => e.FormName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MainProductId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("MainProductID");
            entity.Property(e => e.MatchProductId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("MatchProductID");
        });

        modelBuilder.Entity<ScdsPr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SCDs_PR");

            entity.Property(e => e.ActivityName).IsRequired();
            entity.Property(e => e.FormName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ScdsTq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SCDs_TQ");

            entity.Property(e => e.ActivityName).IsRequired();
            entity.Property(e => e.Discount).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.FormName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Schema>(entity =>
        {
            entity.HasKey(e => e.Version).HasName("PK_HangFire_Schema");

            entity.ToTable("Schema", "HangFire");

            entity.Property(e => e.Version).ValueGeneratedNever();
        });

        modelBuilder.Entity<SendedNotification>(entity =>
        {
            entity.HasOne(d => d.Member).WithMany(p => p.SendedNotifications)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SendedNotifications_Members");

            entity.HasOne(d => d.Notification).WithMany(p => p.SendedNotifications)
                .HasForeignKey(d => d.NotificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SendedNotifications_Notifications");
        });

        modelBuilder.Entity<Server>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_HangFire_Server");

            entity.ToTable("Server", "HangFire");

            entity.HasIndex(e => e.LastHeartbeat, "IX_HangFire_Server_LastHeartbeat");

            entity.Property(e => e.Id).HasMaxLength(200);
            entity.Property(e => e.LastHeartbeat).HasColumnType("datetime");
        });

        modelBuilder.Entity<Set>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Value }).HasName("PK_HangFire_Set");

            entity.ToTable("Set", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Set_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.HasIndex(e => new { e.Key, e.Score }, "IX_HangFire_Set_Score");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(256);
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShoppingCartDiscount>(entity =>
        {
            entity.Property(e => e.ActivityName).IsRequired();
            entity.Property(e => e.FormName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ShoppingCartDiscountsPriceEqual>(entity =>
        {
            entity.ToTable("ShoppingCartDiscounts_PriceEquals");

            entity.Property(e => e.MainProductId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("MainProductID");
            entity.Property(e => e.MatchProductId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("MatchProductID");
        });

        modelBuilder.Entity<ShoppingCartDiscountsPriceReduce>(entity =>
        {
            entity.ToTable("ShoppingCartDiscounts_PriceReduce");
        });

        modelBuilder.Entity<ShoppingCartDiscountsTheQuantity>(entity =>
        {
            entity.ToTable("ShoppingCartDiscounts_TheQuantities");

            entity.Property(e => e.Discount).HasColumnType("decimal(3, 2)");
        });

        modelBuilder.Entity<ShoppingCartDiscountsTotalQuantity>(entity =>
        {
            entity.ToTable("ShoppingCartDiscounts_TotalQuantities");

            entity.Property(e => e.Discount).HasColumnType("decimal(3, 2)");
        });

        modelBuilder.Entity<ShoppingCartOrder>(entity =>
        {
            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.MemberId).HasMaxLength(50);
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.States).HasColumnName("states");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}